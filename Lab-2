def label_encode(data):
    unique_values = list(set(data))
    encoding_dict = {val: i for i, val in enumerate(unique_values)}
    encoded_data = [encoding_dict[val] for val in data]
    
    return encoded_data, encoding_dict


user_input = input("Enter categorical values separated by spaces: ")


data = user_input.split()


encoded_data, encoding_dict = label_encode(data)

print("Original Data:", data)
print("Encoded Data:", encoded_data)

print("\nEncoding Dictionary:") 
for key, value in encoding_dict.items():
    print(f"{key}: {value}")

%%
import math

def euclidean_distance(vector1, vector2):
    if len(vector1) != len(vector2):
        raise ValueError("Vectors must be of the same dimension")
    
    distance = 0
    for i in range(len(vector1)):
        distance += (vector1[i] - vector2[i]) ** 2

    return math.sqrt(distance)

def manhattan_distance(vector1, vector2):
    if len(vector1) != len(vector2):
        raise ValueError("Vectors must be of the same dimension")

    distance = 0
    for i in range(len(vector1)):
        distance += (vector1[i] - vector2[i])

    return distance if distance >= 0 else -distance

vector_a = [1, 2, 3]
vector_b = [4, 5, 6]

euclidean_dist = euclidean_distance(vector_a, vector_b)
manhattan_dist = manhattan_distance(vector_a, vector_b)

print("Euclidean Distance:", euclidean_dist)
print("Manhattan Distance:", manhattan_dist)

%% 
 def onehotencode(data):
    unique_values = list(set(data))
    encoding_dict = {value: index for index, value in enumerate(unique_values)}
    encoded_data = []
    for val in data:
        encoding = [0] * len(unique_values)
        encoding[encoding_dict[val]] = 1
        encoded_data.append(encoding)
    return encoded_data, encoding_dict


user_input = input("Enter categorical values: ")



categorical_data=user_input.split()

encoded_data, encoding_dict = onehotencode(categorical_data)

print("Original Data:", categorical_data)
print("One-Hot Encoded Data:")
for data_point in encoded_data:
    print(data_point)

print("\nEncoding Dictionary:")
for key, value in encoding_dict.items():
    print(f"{key}: {value}")


